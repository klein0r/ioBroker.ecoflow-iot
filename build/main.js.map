{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\nimport * as utils from '@iobroker/adapter-core';\nimport mqtt from 'mqtt';\nimport { EcoflowApi } from './lib/ecoflow-api';\nimport { knownStates as efKnownStates } from './lib/ecoflow-states';\n\ntype QuotaDescription = {\n    valueType: string;\n    objId: string;\n};\n\ntype ModuleTypeDescription = Record<string, QuotaDescription>;\n\ntype DeviceDescription = Record<string, ModuleTypeDescription>;\n\ntype MqttCredentials = {\n    user: string;\n    password: string;\n    url: string;\n    port: number;\n    protocol: 'mqtt' | 'mqtts';\n};\n\nclass EcoflowIot extends utils.Adapter {\n    private apiConnected: boolean;\n    private ecoFlowApiClient: EcoflowApi.Client | null;\n    private knownDevices: Record<string /* sn */, DeviceDescription>;\n    private mqttConnection?: { client: mqtt.MqttClient; credentials: MqttCredentials };\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'ecoflow-iot',\n        });\n\n        this.apiConnected = false;\n        this.ecoFlowApiClient = null;\n        this.knownDevices = {};\n\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    private getEcoflowApiClient(): EcoflowApi.Client {\n        if (!this.ecoFlowApiClient) {\n            this.ecoFlowApiClient = new EcoflowApi.Client(this.log, this.config.accessKey, this.config.secretKey);\n        }\n\n        return this.ecoFlowApiClient;\n    }\n\n    private async onReady(): Promise<void> {\n        this.setApiConnected(false);\n\n        if (!this.config.accessKey || !this.config.secretKey) {\n            if (typeof this.terminate === 'function') {\n                this.terminate(11);\n            } else {\n                process.exit(11);\n            }\n\n            return;\n        }\n\n        const ecoFlowApiClient = this.getEcoflowApiClient();\n\n        const deviceList = await ecoFlowApiClient.getDeviceList();\n        for (const device of deviceList) {\n            this.log.debug(`[onReady] Found device ${device.sn}: ${device.productName} (online: ${device.online})`);\n\n            const deviceQuota = await ecoFlowApiClient.getDeviceQuota(device.sn);\n\n            const moduleTypes: Record<string, { moduleType: string; prefix: string }> = {\n                pd: { moduleType: '1', prefix: 'pd' },\n                bms: { moduleType: '2', prefix: 'bms_bmsStatus' },\n                inv: { moduleType: '3', prefix: 'inv' },\n                bms_slave: { moduleType: '4', prefix: 'bms_emsStatus' },\n                mppt: { moduleType: '5', prefix: 'mppt' },\n            };\n\n            await this.extendObject(`devices.${device.sn}`, {\n                type: 'device',\n                common: {\n                    name: device.productName,\n                    desc: device.sn,\n                },\n                native: {\n                    sn: device.sn,\n                },\n            });\n\n            this.knownDevices[device.sn] = {};\n\n            for (const [type, config] of Object.entries(moduleTypes)) {\n                this.knownDevices[device.sn][config.moduleType] = {};\n\n                const objIdPrefix = `devices.${device.sn}.${type}`;\n\n                await this.extendObject(objIdPrefix, {\n                    type: 'channel',\n                    common: {\n                        name: `${config.prefix} (${config.moduleType})`,\n                    },\n                    native: {},\n                });\n\n                const moduleTypeQuota = Object.keys(deviceQuota).filter((quota) => quota.startsWith(`${config.prefix}.`));\n\n                for (const quota of moduleTypeQuota) {\n                    const valueType = typeof deviceQuota[quota];\n                    // TODO: Other types?\n                    if (valueType === 'number') {\n                        const quotaId = quota.replace(`${config.prefix}.`, '');\n                        const efState = Object.hasOwn(efKnownStates, quota) ? efKnownStates[quota] : {};\n                        const objId = `${objIdPrefix}.${quotaId}`;\n\n                        this.knownDevices[device.sn][config.moduleType][quotaId] = {\n                            objId,\n                            valueType,\n                        };\n\n                        await this.extendObject(objId, {\n                            type: 'state',\n                            common: {\n                                name: quota,\n                                role: 'value',\n                                type: 'number',\n                                read: true,\n                                write: false,\n                                ...(efState?.common ?? {}),\n                            },\n                            native: {\n                                quota,\n                                moduleType: config.moduleType,\n                            },\n                        });\n\n                        await this.setState(objId, { val: deviceQuota[quota], ack: true });\n                    }\n                }\n            }\n        }\n\n        const mqttConnection = await this.getMqttConnection();\n        const mqttCredentials = mqttConnection.credentials;\n        const mqttClient = mqttConnection.client;\n\n        this.log.info(`MQTT Client connected to ${mqttCredentials.url}:${mqttCredentials.port} (user: ${mqttCredentials.user})`);\n\n        for (const sn of Object.keys(this.knownDevices)) {\n            await mqttClient.subscribeAsync(`/open/${mqttCredentials.user}/${sn}/quota`);\n            this.log.debug(`MQTT Client subscribed to /open/${mqttCredentials.user}/${sn}/quota`);\n\n            // await mqttClient.subscribeAsync(`/open/${mqttCredentials.user}/${sn}/status`);\n        }\n\n        mqttClient.on('message', (topic, message) => {\n            this.log.debug(`[MQTT client] Received message on topic ${topic}: ${message}`);\n\n            // Find matching device\n            for (const [sn, quota] of Object.entries(this.knownDevices)) {\n                this.log.debug(`[MQTT client] Searching ${sn} in topic ${topic}`);\n                if (topic.includes(sn)) {\n                    try {\n                        const payload = message.toString();\n                        const payloadObj = JSON.parse(payload);\n\n                        for (const [param, val] of Object.entries(payloadObj.params)) {\n                            const quotaDescription = quota?.[payloadObj.moduleType]?.[param];\n                            if (quotaDescription) {\n                                const valueType = typeof val;\n                                if (valueType === 'number' && valueType === quotaDescription.valueType) {\n                                    this.log.debug(`[MQTT client] Setting ${quotaDescription.objId} to ${val}`);\n                                    this.setState(quotaDescription.objId, {\n                                        val: Number(val),\n                                        ack: true,\n                                        c: topic,\n                                    });\n                                }\n                            }\n                        }\n                    } catch {}\n                }\n            }\n        });\n\n        await this.subscribeStatesAsync('*');\n    }\n\n    private async getMqttConnection(): Promise<{ client: mqtt.MqttClient; credentials: MqttCredentials }> {\n        if (!this.mqttConnection) {\n            const mqttCredentials = await this.getMqttClientCredentials();\n            const mqttClient = mqtt.connect({\n                protocol: mqttCredentials.protocol,\n                host: mqttCredentials.url,\n                port: mqttCredentials.port,\n                username: mqttCredentials.user,\n                password: mqttCredentials.password,\n            });\n\n            this.log.info(`MQTT Client connected to ${mqttCredentials.url}:${mqttCredentials.port} (user: ${mqttCredentials.user})`);\n\n            await this.setApiConnected(true);\n\n            this.mqttConnection = {\n                client: mqttClient,\n                credentials: mqttCredentials,\n            };\n        }\n\n        return this.mqttConnection;\n    }\n\n    private async getMqttClientCredentials(forceRecreate?: boolean): Promise<MqttCredentials> {\n        if (forceRecreate) {\n            const ecoFlowApiClient = this.getEcoflowApiClient();\n            const certificate = await ecoFlowApiClient.getCertificateAcquisition();\n\n            await this.setState('mqtt.user', { val: certificate.certificateAccount, ack: true });\n            await this.setState('mqtt.password', { val: certificate.certificatePassword, ack: true });\n            await this.setState('mqtt.url', { val: certificate.url, ack: true });\n            await this.setState('mqtt.port', { val: Number(certificate.port), ack: true });\n            await this.setState('mqtt.protocol', { val: certificate.protocol, ack: true });\n        }\n\n        const mqttStates = await this.getStatesAsync('mqtt.*');\n        return {\n            user: String(mqttStates[`${this.namespace}.mqtt.user`].val),\n            password: String(mqttStates[`${this.namespace}.mqtt.password`].val),\n            url: String(mqttStates[`${this.namespace}.mqtt.url`].val),\n            port: Number(mqttStates[`${this.namespace}.mqtt.port`].val),\n            protocol: mqttStates[`${this.namespace}.mqtt.protocol`].val == 'mqtts' ? 'mqtts' : 'mqtt',\n        };\n    }\n\n    private async setApiConnected(connection: boolean): Promise<void> {\n        if (connection !== this.apiConnected) {\n            await this.setStateChangedAsync('info.connection', { val: connection, ack: true });\n            this.apiConnected = connection;\n\n            if (connection) {\n                // API was offline - refresh all states\n                this.log.debug('API is online');\n            } else {\n                this.log.debug('API is offline');\n            }\n        }\n    }\n\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (id && state && !state.ack) {\n            // const idNoNamespace = this.removeNamespace(id);\n\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        }\n    }\n\n    public removeNamespace(id: string): string {\n        const re = new RegExp(this.namespace + '*\\\\.', 'g');\n        return id.replace(re, '');\n    }\n\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            await this.setApiConnected(false);\n\n            if (this.mqttConnection) {\n                await this.mqttConnection.client.endAsync();\n                this.mqttConnection = undefined;\n            }\n\n            callback();\n        } catch {\n            callback();\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new EcoflowIot(options);\n} else {\n    // otherwise start the instance directly\n    (() => new EcoflowIot())();\n}\n"],
  "mappings": "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",
  "names": ["efKnownStates", "_a", "mqtt"]
}
