{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\nimport * as utils from '@iobroker/adapter-core';\nimport { EcoflowApi } from './lib/ecoflow-api';\nimport { knownStates as efKnownStates } from './lib/ecoflow-states';\n\nclass EcoflowIot extends utils.Adapter {\n    private apiConnected: boolean;\n    private ecoFlowApiClient: EcoflowApi.Client | null;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'ecoflow-iot',\n        });\n\n        this.apiConnected = false;\n        this.ecoFlowApiClient = null;\n\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    private async onReady(): Promise<void> {\n        this.setApiConnected(false);\n\n        this.ecoFlowApiClient = new EcoflowApi.Client(this.log, this.config.accessKey, this.config.secretKey);\n\n        const deviceList = await this.ecoFlowApiClient.getDeviceList();\n        for (const device of deviceList) {\n            this.log.debug(`[onReady] Found device ${device.sn}: ${device.productName} (online: ${device.online})`);\n\n            const deviceQuota = await this.ecoFlowApiClient.getDeviceQuota(device.sn);\n\n            const moduleTypes = {\n                PD: { moduleType: 1, prefix: 'pd' },\n                BMS: { moduleType: 2, prefix: 'bms_emsStatus' },\n                INV: { moduleType: 3, prefix: 'inv' },\n                BMS_SLAVE: { moduleType: 4, prefix: 'bms_bmsStatus' },\n                MPPT: { moduleType: 5, prefix: 'mppt' },\n            };\n\n            await this.extendObject(`devices.${device.sn}`, {\n                type: 'device',\n                common: {\n                    name: device.productName,\n                    desc: device.sn,\n                },\n                native: {\n                    sn: device.sn,\n                },\n            });\n\n            for (const [type, config] of Object.entries(moduleTypes)) {\n                await this.extendObject(`devices.${device.sn}.${type}`, {\n                    type: 'channel',\n                    common: {\n                        name: `${type} (${config.moduleType})`,\n                    },\n                    native: {},\n                });\n\n                if (config.prefix) {\n                    const moduleTypeQuota = Object.keys(deviceQuota).filter((quota) => quota.startsWith(`${config.prefix}.`));\n\n                    for (const quota of moduleTypeQuota) {\n                        const quotaId = quota.replace(`${config.prefix}.`, '');\n                        const efState = Object.hasOwn(efKnownStates, quota) ? efKnownStates[quota].common : {};\n\n                        await this.extendObject(`devices.${device.sn}.${type}.${quotaId}`, {\n                            type: 'state',\n                            common: {\n                                name: quota,\n                                role: 'value',\n                                type: 'mixed',\n                                read: true,\n                                write: false,\n                                ...efState,\n                            },\n                            native: {\n                                quota,\n                                moduleType: config.moduleType,\n                            },\n                        });\n                        await this.setState(`devices.${device.sn}.${type}.${quotaId}`, { val: deviceQuota[quota], ack: true });\n                    }\n                }\n            }\n        }\n\n        //await this.ecoFlowApiClient.getCertificateAcquisition();\n\n        await this.subscribeStatesAsync('*');\n    }\n\n    private async setApiConnected(connection: boolean): Promise<void> {\n        if (connection !== this.apiConnected) {\n            await this.setStateChangedAsync('info.connection', { val: connection, ack: true });\n            this.apiConnected = connection;\n\n            if (connection) {\n                // API was offline - refresh all states\n                this.log.debug('API is online');\n            } else {\n                this.log.debug('API is offline');\n            }\n        }\n    }\n\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (id && state && !state.ack) {\n            // const idNoNamespace = this.removeNamespace(id);\n\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        }\n    }\n\n    public removeNamespace(id: string): string {\n        const re = new RegExp(this.namespace + '*\\\\.', 'g');\n        return id.replace(re, '');\n    }\n\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            await this.setApiConnected(false);\n\n            callback();\n        } catch {\n            callback();\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new EcoflowIot(options);\n} else {\n    // otherwise start the instance directly\n    (() => new EcoflowIot())();\n}\n"],
  "mappings": "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",
  "names": ["efKnownStates"]
}
