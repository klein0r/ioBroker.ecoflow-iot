{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\nimport * as utils from '@iobroker/adapter-core';\nimport { EcoflowApi } from './lib/ecoflow-api';\nimport { EcoflowMqtt } from './lib/ecoflow-mqtt';\nimport { knownStates as efKnownStates } from './lib/ecoflow-states';\n\ntype QuotaDescription = {\n    valueType: string;\n    objId: string;\n};\n\ntype ModuleTypeDescription = Record<string, QuotaDescription>;\n\ntype DeviceDescription = Record<string, ModuleTypeDescription>;\n\nclass EcoflowIot extends utils.Adapter {\n    private apiConnected: boolean;\n    private ecoFlowApiClient?: EcoflowApi.Client;\n    private ecoFlowMqttClient?: EcoflowMqtt.Client;\n    private knownDevices: Record<string /* sn */, DeviceDescription>;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'ecoflow-iot',\n        });\n\n        this.apiConnected = false;\n        this.knownDevices = {};\n\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    private getEcoflowApiClient(): EcoflowApi.Client {\n        if (!this.ecoFlowApiClient) {\n            this.ecoFlowApiClient = new EcoflowApi.Client(this.log, this.config.accessKey, this.config.secretKey);\n        }\n\n        return this.ecoFlowApiClient;\n    }\n\n    private async onReady(): Promise<void> {\n        this.setApiConnected(false);\n\n        if (!this.config.accessKey || !this.config.secretKey) {\n            this.log.error(`Access key and/or secret key is empty. Please check instance configuration and restart.`);\n\n            if (typeof this.terminate === 'function') {\n                this.terminate(11);\n            } else {\n                process.exit(11);\n            }\n\n            return;\n        }\n\n        const ecoFlowApiClient = this.getEcoflowApiClient();\n\n        const deviceList = await ecoFlowApiClient.getDeviceList();\n        for (const device of deviceList) {\n            this.log.debug(`[onReady] Found device ${device.sn}: ${device.productName} (online: ${device.online})`);\n\n            const deviceQuota = await ecoFlowApiClient.getDeviceQuota(device.sn);\n\n            const moduleTypes: Record<string, { moduleType: string; prefix: string }> = {\n                pd: { moduleType: '1', prefix: 'pd' },\n                bms: { moduleType: '2', prefix: 'bms_bmsStatus' },\n                inv: { moduleType: '3', prefix: 'inv' },\n                bms_slave: { moduleType: '4', prefix: 'bms_emsStatus' },\n                mppt: { moduleType: '5', prefix: 'mppt' },\n            };\n\n            await this.extendObject(`devices.${device.sn}`, {\n                type: 'device',\n                common: {\n                    name: device.productName,\n                    desc: device.sn,\n                },\n                native: {\n                    sn: device.sn,\n                },\n            });\n\n            this.knownDevices[device.sn] = {};\n\n            for (const [type, config] of Object.entries(moduleTypes)) {\n                this.knownDevices[device.sn][config.moduleType] = {};\n\n                const objIdPrefix = `devices.${device.sn}.${type}`;\n\n                await this.extendObject(objIdPrefix, {\n                    type: 'channel',\n                    common: {\n                        name: `${config.prefix} (${config.moduleType})`,\n                    },\n                    native: {},\n                });\n\n                const moduleTypeQuota = Object.keys(deviceQuota).filter((quota) => quota.startsWith(`${config.prefix}.`));\n\n                for (const quota of moduleTypeQuota) {\n                    const valueType = typeof deviceQuota[quota];\n                    // TODO: Other types?\n                    if (valueType === 'number') {\n                        const quotaId = quota.replace(`${config.prefix}.`, '');\n                        const efState = Object.hasOwn(efKnownStates, quota) ? efKnownStates[quota] : {};\n                        const objId = `${objIdPrefix}.${quotaId}`;\n\n                        this.knownDevices[device.sn][config.moduleType][quotaId] = {\n                            objId,\n                            valueType,\n                        };\n\n                        await this.extendObject(objId, {\n                            type: 'state',\n                            common: {\n                                name: quota,\n                                role: 'value',\n                                type: 'number',\n                                read: true,\n                                write: false,\n                                ...(efState?.common ?? {}),\n                            },\n                            native: {\n                                sn: device.sn,\n                                quota,\n                                moduleType: config.moduleType,\n                                ...(efState?.native ?? {}),\n                            },\n                        });\n\n                        await this.setState(objId, { val: deviceQuota[quota], ack: true });\n                    }\n                }\n            }\n        }\n\n        // MQTT\n        const mqttCredentials = await this.getStoredMqttClientCredentials();\n\n        this.ecoFlowMqttClient = new EcoflowMqtt.Client(this.log, this.getEcoflowApiClient(), mqttCredentials);\n        this.ecoFlowMqttClient.on('credentialUpdate', (mqttCredentials) => this.updateMqttClientCredentials(mqttCredentials));\n        this.ecoFlowMqttClient.on('newParamsEvent', (sn, moduleType, params) => {\n            for (const [param, val] of Object.entries(params)) {\n                const quotaDescription = this.knownDevices[sn]?.[moduleType]?.[param];\n                if (quotaDescription) {\n                    const valueType = typeof val;\n\n                    if (valueType === 'number' && valueType === quotaDescription.valueType) {\n                        this.log.silly(`[MQTT client] Setting ${quotaDescription.objId} to ${val}`);\n\n                        this.setState(quotaDescription.objId, {\n                            val: Number(val),\n                            ack: true,\n                        });\n                    }\n                }\n            }\n        });\n\n        this.ecoFlowMqttClient.init(Object.keys(this.knownDevices));\n\n        await this.subscribeStatesAsync('*');\n    }\n\n    private async getStoredMqttClientCredentials(): Promise<EcoflowMqtt.MqttCredentials | undefined> {\n        const mqttStates = await this.getStatesAsync('mqtt.*');\n\n        let isValid = true;\n        const checkIDs = ['user', 'password', 'url', 'port', 'protocol'];\n        for (const checkID of checkIDs) {\n            const checkState = mqttStates[`${this.namespace}.mqtt.${checkID}`];\n            if (!checkState || !checkState.val) {\n                isValid = false;\n            }\n        }\n\n        if (!isValid) {\n            this.log.info('Stored MQTT credentials are empty oder invalid. Recreating new information.');\n            return undefined;\n        }\n\n        return {\n            user: String(mqttStates[`${this.namespace}.mqtt.user`].val),\n            password: String(mqttStates[`${this.namespace}.mqtt.password`].val),\n            url: String(mqttStates[`${this.namespace}.mqtt.url`].val),\n            port: Number(mqttStates[`${this.namespace}.mqtt.port`].val),\n            protocol: mqttStates[`${this.namespace}.mqtt.protocol`].val == 'mqtts' ? 'mqtts' : 'mqtt',\n        };\n    }\n\n    private async updateMqttClientCredentials(mqttCredentials: EcoflowMqtt.MqttCredentials): Promise<void> {\n        await this.setStateChangedAsync('mqtt.user', { val: mqttCredentials.user, ack: true });\n        await this.setStateChangedAsync('mqtt.password', { val: mqttCredentials.password, ack: true });\n        await this.setStateChangedAsync('mqtt.url', { val: mqttCredentials.url, ack: true });\n        await this.setStateChangedAsync('mqtt.port', { val: mqttCredentials.port, ack: true });\n        await this.setStateChangedAsync('mqtt.protocol', { val: mqttCredentials.protocol, ack: true });\n    }\n\n    private async setApiConnected(connection: boolean): Promise<void> {\n        if (connection !== this.apiConnected) {\n            await this.setStateChangedAsync('info.connection', { val: connection, ack: true });\n            this.apiConnected = connection;\n\n            if (connection) {\n                // API was offline - refresh all states\n                this.log.debug('API is online');\n            } else {\n                this.log.debug('API is offline');\n            }\n        }\n    }\n\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (id && state && !state.ack) {\n            const idNoNamespace = this.removeNamespace(id);\n\n            if (idNoNamespace.startsWith('devices.')) {\n                // Device operation\n\n                const stateObj = await this.getObjectAsync(id);\n                const sn = stateObj?.native?.sn;\n                const operateType = stateObj?.native?.operateType;\n                const operateParamName = stateObj?.native?.operateParamName;\n                const moduleType = stateObj?.native.moduleType;\n\n                if (sn && operateType && moduleType) {\n                    this.log.info(`${idNoNamespace} changed to ${state.val} - perform change of operateType ${operateType}, moduleType ${moduleType} for ${sn}`);\n\n                    const operateParams = {\n                        [operateParamName]: state.val,\n                    };\n\n                    // Find more values for same operateType\n                    const objList = await this.getObjectViewAsync('system', 'state', {\n                        startkey: `${this.namespace}.devices.${sn}.`,\n                        endkey: `${this.namespace}.devices.${sn}.\\u9999`,\n                        include_docs: true,\n                    });\n\n                    for (const obj of objList.rows) {\n                        if (obj.id !== id) {\n                            const testModuleType = obj.value.native?.moduleType;\n                            const testOperateType = obj.value.native?.operateType;\n                            const testOperateParamName = obj.value.native?.operateParamName;\n\n                            if (testModuleType == moduleType && testOperateType == operateType && testOperateParamName) {\n                                const additionalState = await this.getForeignStateAsync(obj.id);\n                                if (additionalState) {\n                                    operateParams[testOperateParamName] = additionalState.val;\n                                }\n                            }\n                        }\n                    }\n\n                    if (this.ecoFlowMqttClient) {\n                        await this.ecoFlowMqttClient.publishChange(sn, moduleType, operateType, operateParams);\n                    }\n                }\n            }\n        }\n    }\n\n    public removeNamespace(id: string): string {\n        const re = new RegExp(this.namespace + '*\\\\.', 'g');\n        return id.replace(re, '');\n    }\n\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            await this.setApiConnected(false);\n\n            if (this.ecoFlowMqttClient) {\n                // await this.mqttConnection.client.endAsync();\n                // this.mqttConnection = undefined;\n            }\n\n            callback();\n        } catch {\n            callback();\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new EcoflowIot(options);\n} else {\n    // otherwise start the instance directly\n    (() => new EcoflowIot())();\n}\n"],
  "mappings": "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",
  "names": ["efKnownStates", "mqttCredentials", "_a", "_b"]
}
