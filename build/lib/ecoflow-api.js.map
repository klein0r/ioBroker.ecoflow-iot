{
  "version": 3,
  "sources": ["../../src/lib/ecoflow-api.ts"],
  "sourcesContent": ["import axios, { AxiosInstance } from 'axios';\nimport crypto from 'node:crypto';\n\nexport namespace EcoflowApi {\n    export type EcoFlowResponse = {\n        code: string;\n        message: string; // \"Success\"\n        data: any;\n        eagleEyeTraceId: string;\n        tid: string;\n    };\n\n    export type EcoFlowDevice = {\n        sn: string;\n        online: number;\n        productName: string;\n    };\n\n    export type EcoFlowCertification = {\n        certificateAccount: string;\n        certificatePassword: string;\n        url: string;\n        port: string;\n        protocol: string;\n    };\n\n    export class Client {\n        private logger: ioBroker.Log;\n        private axiosInstance: AxiosInstance | undefined = undefined;\n        private accessKey: string;\n        private secretKey: string;\n\n        public constructor(logger: ioBroker.Log, accessKey: string, secretKey: string) {\n            this.logger = logger;\n\n            this.accessKey = accessKey;\n            this.secretKey = secretKey;\n\n            this.axiosInstance = axios.create({\n                baseURL: 'https://api.ecoflow.com/',\n                timeout: 3000,\n                validateStatus: (status) => {\n                    return [200].indexOf(status) > -1;\n                },\n                responseType: 'json',\n            });\n        }\n\n        private flattenKeys(obj: Record<string, any>, prefix?: string): Record<string, any> {\n            const getPrefix = (k: string): string => {\n                if (!prefix) return k;\n                return Array.isArray(obj) ? `${prefix}[${k}]` : `${prefix}.${k}`;\n            };\n\n            let res: Record<string, any> = {};\n\n            Object.keys(obj).forEach((k) => {\n                if (typeof obj[k] === 'object') {\n                    res = { ...res, ...this.flattenKeys(obj[k], getPrefix(k)) };\n                } else {\n                    res[getPrefix(k)] = obj[k];\n                }\n            });\n\n            return res;\n        }\n\n        private async apiRequestAsync(method: 'get' | 'post' | 'put', url: string, data?: object): Promise<EcoFlowResponse> {\n            const sha256 = (str: string, key: string): string => crypto.createHmac('sha256', key).update(str).digest('hex');\n\n            const nonce = String(100000 + Math.floor(Math.random() * 100000));\n            const timestamp = String(Date.now());\n\n            // Generate data string (sorted by keys)\n            let dataStr = '';\n            if (data) {\n                const flatData = this.flattenKeys(data);\n                const flatDataKeys = Object.keys(flatData);\n                flatDataKeys.sort();\n\n                dataStr = flatDataKeys.map((k) => `${k}=${flatData[k]}`).join('&') + '&';\n            }\n\n            const uri = `${dataStr}accessKey=${this.accessKey}&nonce=${nonce}&timestamp=${timestamp}`;\n            const sign = sha256(uri, this.secretKey);\n\n            const apiResponse = await this.axiosInstance!.request({\n                method,\n                url,\n                data,\n                headers: {\n                    'Content-Type': 'application/json;charset=UTF-8',\n                    accessKey: this.accessKey,\n                    nonce,\n                    timestamp,\n                    sign,\n                },\n            });\n\n            this.logger.debug(`Received ${apiResponse.status} from ${method} to ${url} (${uri}): ${JSON.stringify(apiResponse.data)}`);\n\n            if (apiResponse.status === 200 && apiResponse.data.code == 0) {\n                return apiResponse.data;\n            }\n\n            throw new Error(`${apiResponse.data.code}: ${apiResponse.data.message}`);\n        }\n\n        public async getDeviceList(): Promise<Array<EcoFlowDevice>> {\n            const deviceListResponse = await this.apiRequestAsync('get', '/iot-open/sign/device/list');\n\n            return deviceListResponse.data;\n        }\n\n        public async getDeviceQuota(sn: string): Promise<Record<string, any>> {\n            const quotaResponse = await this.apiRequestAsync('get', `/iot-open/sign/device/quota/all?sn=${sn}`);\n\n            return quotaResponse.data;\n        }\n\n        public async getCertificateAcquisition(): Promise<EcoFlowCertification> {\n            const certificationResponse = await this.apiRequestAsync('get', '/iot-open/sign/certification');\n\n            return certificationResponse.data;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["EcoflowApi", "axios", "crypto"]
}
