{
  "version": 3,
  "sources": ["../../src/lib/ecoflow-mqtt.ts"],
  "sourcesContent": ["import mqtt from 'mqtt';\nimport { EventEmitter } from 'node:events';\nimport { EcoflowApi } from './ecoflow-api';\n\nexport namespace EcoflowMqtt {\n    type LocalEventTypes = {\n        credentialUpdate: [mqttCredentials: MqttCredentials];\n        newParamsEvent: [sn: string, moduleType: string, params: Record<string, any>];\n    };\n\n    class TypedEventEmitter<TEvents extends Record<string, any>> {\n        private emitter = new EventEmitter();\n\n        public emit<TEventName extends keyof TEvents & string>(eventName: TEventName, ...eventArg: TEvents[TEventName]): void {\n            this.emitter.emit(eventName, ...(eventArg as []));\n        }\n\n        public on<TEventName extends keyof TEvents & string>(eventName: TEventName, handler: (...eventArg: TEvents[TEventName]) => void): void {\n            this.emitter.on(eventName, handler as any);\n        }\n\n        public off<TEventName extends keyof TEvents & string>(eventName: TEventName, handler: (...eventArg: TEvents[TEventName]) => void): void {\n            this.emitter.off(eventName, handler as any);\n        }\n    }\n\n    export type MqttCredentials = {\n        user: string;\n        password: string;\n        url: string;\n        port: number;\n        protocol: 'mqtt' | 'mqtts';\n    };\n\n    export class Client extends TypedEventEmitter<LocalEventTypes> {\n        private logger: ioBroker.Log;\n        private ecoFlowApiClient: EcoflowApi.Client;\n\n        private mqttPublishId: number;\n        private mqttClient?: mqtt.MqttClient;\n        private mqttCredentials?: MqttCredentials;\n\n        public constructor(logger: ioBroker.Log, apiClient: EcoflowApi.Client, mqttCredentials?: MqttCredentials) {\n            super();\n\n            this.logger = logger;\n            this.ecoFlowApiClient = apiClient;\n            this.mqttCredentials = mqttCredentials;\n\n            this.mqttPublishId = 1;\n        }\n\n        public async init(snList: Array<string>): Promise<void> {\n            let mqttCredentials = this.mqttCredentials;\n            if (!mqttCredentials) {\n                mqttCredentials = await this.generateNewCredentials();\n            }\n\n            try {\n                this.mqttClient = await this.getMqttClient(mqttCredentials, snList);\n            } catch (err) {\n                this.logger.error(`Mqtt client init failed: ${err}`);\n            }\n        }\n\n        private async generateNewCredentials(): Promise<MqttCredentials> {\n            const apiCertificateAcquisition = await this.ecoFlowApiClient.getCertificateAcquisition();\n            const mqttCredentials = {\n                user: apiCertificateAcquisition.certificateAccount,\n                password: apiCertificateAcquisition.certificatePassword,\n                url: apiCertificateAcquisition.url,\n                port: Number(apiCertificateAcquisition.port),\n                protocol: apiCertificateAcquisition.protocol,\n            };\n\n            this.mqttCredentials = mqttCredentials;\n            this.emit('credentialUpdate', mqttCredentials);\n\n            return mqttCredentials;\n        }\n\n        private async getMqttClient(mqttCredentials: MqttCredentials, snList: Array<string>): Promise<mqtt.MqttClient> {\n            const mqttClient = mqtt.connect({\n                protocol: mqttCredentials.protocol,\n                host: mqttCredentials.url,\n                port: mqttCredentials.port,\n                username: mqttCredentials.user,\n                password: mqttCredentials.password,\n            });\n\n            this.logger.info(`MQTT client connected to ${mqttCredentials.url}:${mqttCredentials.port} (user: ${mqttCredentials.user})`);\n\n            for (const sn of snList) {\n                await mqttClient.subscribeAsync(`/open/${mqttCredentials.user}/${sn}/quota`);\n                this.logger.debug(`MQTT Client subscribed to /open/${mqttCredentials.user}/${sn}/quota`);\n\n                await mqttClient.subscribeAsync(`/open/${mqttCredentials.user}/${sn}/set_reply`);\n                this.logger.debug(`MQTT Client subscribed to /open/${mqttCredentials.user}/${sn}/set_reply`);\n            }\n\n            mqttClient.on('message', (topic, message) => {\n                this.logger.debug(`[MQTT client] Received message on topic ${topic}: ${message}`);\n\n                // Find matching device\n                for (const sn of snList) {\n                    // this.log.debug(`[MQTT client] Searching ${sn} in topic ${topic}`);\n                    if (topic.includes(sn)) {\n                        try {\n                            const payload = message.toString();\n                            const payloadObj = JSON.parse(payload);\n\n                            if (topic.endsWith('/quota')) {\n                                // Update state values\n                                this.emit('newParamsEvent', sn, payloadObj.moduleType, payloadObj.params);\n                            } else if (topic.endsWith('/set_reply')) {\n                                // TODO?\n\n                                this.logger.debug(`Received set reply: ${payload}`);\n                            }\n                        } catch {}\n                    }\n                }\n            });\n\n            return mqttClient;\n        }\n\n        public async publishChange(sn: string, moduleType: string, operateType: string, params: Record<string, any>): Promise<void> {\n            if (this.mqttClient && this.mqttCredentials) {\n                const payload = {\n                    id: this.mqttPublishId++,\n                    version: '1.0',\n                    moduleType: parseInt(moduleType),\n                    operateType,\n                    params,\n                };\n\n                await this.mqttClient.publishAsync(`/open/${this.mqttCredentials.user}/${sn}/set`, JSON.stringify(payload));\n                this.logger.debug(`[publishChange] Sent to ${sn}: ${JSON.stringify(payload)}`);\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["EcoflowMqtt", "mqtt"]
}
